// Code generated by MockGen. DO NOT EDIT.
// Source: server.go

// Package mock_main is a generated GoMock package.
package mock_main

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// Mockserver is a mock of server interface
type Mockserver struct {
	ctrl     *gomock.Controller
	recorder *MockserverMockRecorder
}

// MockserverMockRecorder is the mock recorder for Mockserver
type MockserverMockRecorder struct {
	mock *Mockserver
}

// NewMockserver creates a new mock instance
func NewMockserver(ctrl *gomock.Controller) *Mockserver {
	mock := &Mockserver{ctrl: ctrl}
	mock.recorder = &MockserverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockserver) EXPECT() *MockserverMockRecorder {
	return m.recorder
}

// Write mocks base method
func (m *Mockserver) Write(packet []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", packet)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write
func (mr *MockserverMockRecorder) Write(packet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*Mockserver)(nil).Write), packet)
}

// Read mocks base method
func (m *Mockserver) Read(packet []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", packet)
	ret0, _ := ret[0].(error)
	return ret0
}

// Read indicates an expected call of Read
func (mr *MockserverMockRecorder) Read(packet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*Mockserver)(nil).Read), packet)
}
